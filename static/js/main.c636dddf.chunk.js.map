{"version":3,"sources":["baselogo.svg","Animation/rahmen.svg","Animation/1.svg","Animation/2.svg","Animation/3.svg","Animation/4.svg","Animation/einsfade.svg","Animation/zweifade.svg","Animation/dreifade.svg","Animation/vierfade.svg","Animation/fünffade.svg","Animation/sechsfade.svg","Animation/siebenfade.svg","baselogofüllung.svg","logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","src","baselogofüllung","alt","logo","eins","zwei","drei","vier","einsfade","zweifade","dreifade","vierfade","fünffade","sechsfade","siebenfade","rahmen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,gD,oXC8C5BC,MA5Bf,WACE,OACE,yBAAKC,UAAU,OAEb,4BAAQA,UAAU,cAEhB,yBAAKC,IAAKC,IAAiBF,UAAU,0BAAuBG,IAAI,4BAChE,yBAAKF,IAAKG,IAAMJ,UAAU,WAAWG,IAAI,SACzC,yBAAKF,IAAKI,IAAML,UAAU,YAAYG,IAAI,cAC1C,yBAAKF,IAAKK,IAAMN,UAAU,YAAYG,IAAI,cAC1C,yBAAKF,IAAKM,IAAMP,UAAU,YAAYG,IAAI,cAC1C,yBAAKF,IAAKO,IAAMR,UAAU,YAAYG,IAAI,cAC1C,yBAAKF,IAAKQ,IAAUT,UAAU,gBAAgBG,IAAI,kBAClD,yBAAKF,IAAKS,IAAUV,UAAU,gBAAgBG,IAAI,kBAClD,yBAAKF,IAAKU,IAAUX,UAAU,gBAAgBG,IAAI,kBAClD,yBAAKF,IAAKW,IAAUZ,UAAU,gBAAgBG,IAAI,kBAClD,yBAAKF,IAAKY,IAAUb,UAAU,mBAAgBG,IAAI,qBAClD,yBAAKF,IAAKa,IAAWd,UAAU,iBAAiBG,IAAI,mBACpD,yBAAKF,IAAKc,IAAYf,UAAU,kBAAkBG,IAAI,oBACtD,yBAAKF,IAAKe,IAAQhB,UAAU,cAAcG,IAAI,mBCrBvCc,MAZf,WACE,OACC,6BACG,4BAAQjB,UAAU,cACf,kBAAC,EAAD,SCIWkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c636dddf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/baselogo.bc854983.svg\";","module.exports = __webpack_public_path__ + \"static/media/rahmen.795af394.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.b01c1040.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.63e5b19c.svg\";","module.exports = __webpack_public_path__ + \"static/media/3.2ee27b6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/4.148619a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/einsfade.b8dfaa6c.svg\";","module.exports = __webpack_public_path__ + \"static/media/zweifade.e054d060.svg\";","module.exports = __webpack_public_path__ + \"static/media/dreifade.c941452d.svg\";","module.exports = __webpack_public_path__ + \"static/media/vierfade.27aa731f.svg\";","module.exports = __webpack_public_path__ + \"static/media/fünffade.82aebcf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/sechsfade.2926e5de.svg\";","module.exports = __webpack_public_path__ + \"static/media/siebenfade.b02cc48d.svg\";","module.exports = __webpack_public_path__ + \"static/media/baselogofüllung.68ffe0ca.svg\";","import React from 'react';\r\nimport logo from './baselogo.svg';\r\nimport rahmen from './Animation/rahmen.svg'\r\nimport eins from './Animation/1.svg'\r\nimport zwei from './Animation/2.svg'\r\nimport drei from './Animation/3.svg'\r\nimport vier from './Animation/4.svg'\r\nimport einsfade from './Animation/einsfade.svg'\r\nimport zweifade from './Animation/zweifade.svg'\r\nimport dreifade from './Animation/dreifade.svg'\r\nimport vierfade from './Animation/vierfade.svg'\r\nimport fünffade from './Animation/fünffade.svg'\r\nimport sechsfade from './Animation/sechsfade.svg'\r\nimport siebenfade from './Animation/siebenfade.svg'\r\nimport baselogofüllung from './baselogofüllung.svg'\r\n\r\nimport './App.css';\r\n\r\nfunction Logo() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <header className=\"App-header\">   \r\n      \r\n        <img src={baselogofüllung} className=\"baselogofüllung-logo\" alt=\"baselogofüllung-logo\" />\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <img src={eins} className=\"eins-logo\" alt=\"eins-logo\" />\r\n        <img src={zwei} className=\"zwei-logo\" alt=\"zwei-logo\" />\r\n        <img src={drei} className=\"drei-logo\" alt=\"drei-logo\" />\r\n        <img src={vier} className=\"vier-logo\" alt=\"vier-logo\" />\r\n        <img src={einsfade} className=\"einsfade-logo\" alt=\"einsfade-logo\" />\r\n        <img src={zweifade} className=\"zweifade-logo\" alt=\"zweifade-logo\" />\r\n        <img src={dreifade} className=\"dreifade-logo\" alt=\"dreifade-logo\" />\r\n        <img src={vierfade} className=\"vierfade-logo\" alt=\"vierfade-logo\" />\r\n        <img src={fünffade} className=\"fünffade-logo\" alt=\"fünffade-logo\" />\r\n        <img src={sechsfade} className=\"sechsfade-logo\" alt=\"sechsfade-logo\" />\r\n        <img src={siebenfade} className=\"siebenfade-logo\" alt=\"siebenfade-logo\" />\r\n        <img src={rahmen} className=\"rahmen-logo\" alt=\"rahmen-logo\" />\r\n  \r\n        </header>\r\n   \r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport Logo from './logo';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n   <div >\r\n      <header className=\"App-header\">\r\n         <Logo />\r\n      </header>\r\n   </div>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}